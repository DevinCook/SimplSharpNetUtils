/*******************************************************************************************
  SIMPL+ Module Information
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
*******************************************************************************************/
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

INTEGER_PARAMETER Port;
INTEGER_PARAMETER RX_Buffer_Sz;


DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	_SKIP_;
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	_SKIP_;
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	_SKIP_;
DIGITAL_INPUT	DEBUG;			DIGITAL_OUTPUT	_SKIP_;
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	_SKIP_;

DIGITAL_INPUT	Connect;		DIGITAL_OUTPUT	Connected;
DIGITAL_INPUT	FilterVTs;		DIGITAL_OUTPUT	_SKIP_;

DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	_SKIP_;

STRING_INPUT	Address[64];	STRING_OUTPUT	_SKIP_;
STRING_INPUT	_SKIP_;			STRING_OUTPUT	_SKIP_;
STRING_INPUT	TX$[1024];		STRING_OUTPUT	RX$;

                          
#USER_SIMPLSHARP_LIBRARY "SIMPLSharpNetUtils"


#BEGIN_PARAMETER_PROPERTIES Port
   propValidUnits=unitDecimal;
   propBounds=1d,65535d;
   propDefaultValue=24d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES RX_BUFFER_SZ
   propValidUnits=unitDecimal;
   propBounds=16d,1024d;
   propDefaultValue=200d;
#END_PARAMETER_PROPERTIES


STRING Address_Cache[64];

TCPSocket Client; 

Change Address
{
	Address_Cache = Address;
}

PUSH Connect
{
	Client.Connect(Address_Cache,Port,RX_BUFFER_SZ);
}

Release Connect
{
	Client.Disconnect();
}

Callback Function MyOnConnect()
{
	Connected = 1;
	TRACE("On Connect\n");
}

Callback Function MyOnDisconnect()
{
	Connected = 0;
	TRACE("On Disconnect\n");
}

Callback Function MyOnReceive(String s)
{
	RX$ = s;
}

Change TX$
{
	Client.Send(TX$);
} 

Change FilterVTs
{
	Client.FilterVtCmds = FilterVTs;
}

Change DEBUG
{
//	Client.Debug = DEBUG;
}

Function Init()
{
	RegisterDelegate(Client,OnConnect,MyOnConnect);
	RegisterDelegate(Client,OnDisconnect,MyOnDisconnect);
	RegisterDelegate(Client,OnRx,MyOnReceive);
}

Function Main()
{
	WaitForInitializationComplete();
	Init();
}



